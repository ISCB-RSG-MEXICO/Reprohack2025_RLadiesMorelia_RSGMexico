library(tidyverse)
library(cowplot)
library(ggpubr)
library(ggforce)
getwd()
getqd()
getwd()
#getwd()
mge_pg <- read_tsv("data/processed_data/mge_bins_per_genome_final.txt", col_names = T)
#getwd()
mge_pg <- read_tsv("data/processed_data/mge_bins_per_genome_final.txt.gz", col_names = T)
mge_solitary <- read_tsv("data/processed_data/solitary_mge_bins_final.txt.gz", col_names = F)
rec_class <- read_tsv("raw_data/recombinase.list.gz", col_names = F)
rec_class <- read_tsv("data/raw_data/recombinase.list.gz", col_names = F)
glist <- read_tsv("data/raw_data/genome_status_supplementary_tableS2.txt.gz", col_names = T)
colc <- c("#D55E00", "#E69F00", "#F0E442", "#56B4E9", "#009E73", "#0072B2","#CECCCC")
names(colc) <- c("IS_Tn", "Phage", "Phage_like", "CE", "Integron", "MI", "Cellular")
# Obtener la calidad mas alta en los genomas
glist_high <- glist %>%
filter(genome_quality == "high")
mge_pg <- read_tsv("data/processed_data/mge_bins_per_genome_final.txt.gz", col_names = T)
mge_solitary <- read_tsv("data/processed_data/solitary_mge_bins_final.txt.gz", col_names = F)
rec_class <- read_tsv("data/raw_data/recombinase.list.gz", col_names = F)
glist <- read_tsv("data/raw_data/genome_status_supplementary_tableS2.txt.gz", col_names = T)
# ---- Modificacion de los archivos -----
# Obtener la calidad mas alta en los genomas
glist_high <- glist %>%
filter(genome_quality == "high")
str(rec_class)
# Renombrar columnas
rec_class <- rec_class %>%
# Cambiar X1 por class y X2 por mgeR
dplyr::rename(class = X1, mgeR = X2)
str(rec_class)
# Renombrar columnas
rec_class <- rec_class %>%
# Cambiar X1 por class y X2 por mgeR
dplyr::rename(class = X1, mgeR = X2)
str(rec_class)
# Quitar atributos de 'spec'
attr(rec_class, "spec") <- NULL
# Renombrar columnas
rec_class <- rec_class %>%
# Cambiar X1 por class y X2 por mgeR
dplyr::rename(class = X1, mgeR = X2)
str(rec_class)
rec_class <- read_tsv("data/raw_data/recombinase.list.gz", col_names = F)
str(rec_class)
head(rec_class)
# Renombrar columnas
rec_class <- rec_class %>%
# Cambiar X1 por class y X2 por mgeR
dplyr::rename(class = X1, mgeR = X2)
head(rec_class)
# Renombrar columnas en mge_solitary
mge_solitary <- mge_solitary %>%
dplyr::rename(IS_Tn = X1, Phage = X2, Phage_like = X3, CE = X4, Integron = X5, MI = X6,	Hotspot	= X7, UC = X8,	Cellular = X9, island = X10, island_size = X11, prot_count = X12,	phage_count = X13, CONJ_T4SS = X14,	mgeR = X15)
head(mge_solitaryv)
head(mge_solitary)
head(mge_solitary)
#
mge_solitary_melted <- mge_solitary %>%
select(1:11,15) %>% # Seleccionar columnas de la 1 a la 11, y la 15
# Convierte las columnas 1 a 9 de formato ancho a largo utilizando gather().
# - mge: Nombre de la nueva columna que contendrá los nombres originales de las variables.
# - mge_pa: Nueva columna que almacenará los valores de las celdas de las columnas originales.
gather(mge, mge_pa, 1:9) %>%
filter(mge_pa ==1) %>% # filtrar por valores igual a 1 en la columna mge_pa
filter(.,!grepl("UC", mge)) %>% # Elimina las filas donde la columna mge contenga la cadena "UC", usando grepl() con ! (negación lógica).
filter(.,!grepl("Hotspot", mge)) %>% # Elimina las filas donde mge contenga la palabra "Hotspot".
mutate(mgeRn = str_replace_all(mgeR,"_","")) %>% # Crea una nueva columna mgeRn, eliminando todos los guiones bajos (_) en la columna mgeR
filter(!str_detect(mgeRn, '[:alnum:] &{1,}')) %>% # Filtra las filas donde mgeRn NO contenga un patrón de caracteres alfanuméricos seguidos de &.
select(-mgeRn) %>% # Elimina la columna mgeRn
mutate(mgeR = str_replace_all(mgeR,"&","")) # Modifica mgeR, eliminando todos los caracteres &.
head(mge_solitary)
dim(mge_solitary)
head(mge_solitary_melted )
# Visualizar datos
head(mge_solitary_melted)
mge_solitary_melted_dw <- mge_solitary_melted %>%
select(-mgeR,-mge_pa) %>%  # Elimina las columnas mgeR y mge_pa
mutate(island1 = island) %>% # Crea una nueva columna island1, duplicando el valor de la columna island.
separate(island1, c("g1","g2","g3")) %>% # Divide la columna island1 en tres nuevas columnas (g1, g2, g3), usando separate(). NOTA: Se asume que island1 contiene valores separados por un delimitador (por defecto, "_" o ".").
mutate(genome = paste(g1, g2, sep = ".")) %>%  # Identificador del genoma. Crea una nueva columna genome, concatenando g1 y g2 con un punto (".") entre ellos.
select(-g1,-g2,-g3) %>% # Elimina las columnas g1, g2 y g3
filter(genome %in% glist_high$genome) %>% # Solo quedarse con genomas de alta calidad
select(-genome) # Eliminar columna genoma
head(mge_solitary_melted_dw)
dim(mge_solitary_melted)
dim(mge_solitary_melted_dw)
head(mge_solitary_melted)
# Unir la informacion a traves de la columna mgeR
mge_solitary_rclass_all <- left_join(mge_solitary_melted, rec_class, by = "mgeR") %>%
select(-island_size, -mge_pa, -mgeR) %>% # Elimina las columnas island_size, mge_pa y mgeR
separate(island, c("g1","g2","g3")) %>% # Divide la columna island en tres nuevas columnas (g1, g2, g3).
mutate(genome = paste(g1, g2, sep = ".")) %>% # Crea una nueva columna genome, concatenando g1 y g2 con un punto (".") entre ellos.
select(-g1,-g2,-g3) %>% # Elimina las columnas auxiliares (g1, g2, g3), ya que su información ahora está en genome.
group_by(class,mge) %>% # Agrupa los datos por class y mge
summarise(count = n()) # Cuenta cuántas veces aparece cada combinación de class y mge
head(mge_solitary_rclass_all)
head(mge_solitary_rclass_all)
head(mge_solitary_rclass_all)
# Unir la informacion a traves de la columna mgeR
mge_solitary_rclass <- left_join(mge_solitary_melted,rec_class, by = "mgeR") %>%
select(-island_size, -mge_pa, -mgeR) %>% # Elimina las columnas island_size, mge_pa y mgeR
separate(island, c("g1","g2","g3")) %>% # Divide la columna island en tres nuevas columnas (g1, g2, g3).
mutate(genome = paste(g1, g2, sep = ".")) %>% # Crea una nueva columna genome, concatenando g1 y g2 con un punto (".") entre ellos.
select(-g1,-g2,-g3) %>% # Elimina las columnas auxiliares (g1, g2, g3), ya que su información ahora está en genome.
filter(genome %in% glist_high$genome) %>% # Solo quedarse con genomas de alta calidad
group_by(class,mge) %>% # Agrupa los datos por class y mge
summarise(count = n()) # Cuenta cuántas veces aparece cada combinación de class y mge
head(mge_solitary_melted_dw)
head(mge_solitary_rclass)
colclass <- c("CDCCCC", "CDCCCC", "CDCCCC", "CDCCCC", "CDCCCC")
names(colclass) <- c( "cas", "dde","huh", "ser", "tyr")
colall <- c(colclass, colc)
colall
mge_solitary_rclass$mge <- factor(mge_solitary_rclass$mge, levels = order_mge) # Convierte la variable mge en un factor, asignándole el orden definido en order_mge
colclass <- c("CDCCCC", "CDCCCC", "CDCCCC", "CDCCCC", "CDCCCC")
names(colclass) <- c("cas", "dde", "huh", "ser", "tyr")
colall <- c(colclass, colc)
colall
order_class <- c( "cas", "dde","huh", "ser", "tyr")
order_mge <- c("IS_Tn", "Phage_like", "Phage", "CE", "MI", "Integron", "Cellular")
order_class <- c( "cas", "dde","huh", "ser", "tyr")
order_mge <- c("IS_Tn", "Phage_like", "Phage", "CE", "MI", "Integron", "Cellular")
mge_solitary_rclass$mge <- factor(mge_solitary_rclass$mge, levels = order_mge) # Convierte la variable mge en un factor, asignándole el orden definido en order_mge
mge_solitary_rclass_p <- gather_set_data(mge_solitary_rclass, 1:2) # Reestructura los datos con gather_set_data(), seleccionando las primeras dos columnas (1:2). NOTA: Se asume que esta función organiza los datos en un formato adecuado para un gráfico tipo "alluvial" o "sankey".
mge_solitary_rclass_p$y <- factor(mge_solitary_rclass_p$y, levels = c(order_class, order_mge)) # Convierte la variable y en un factor con el orden de order_class y order_mge, asegurando que los datos se alineen correctamente en la visualización.
mge_solitary_rclass_p <- mge_solitary_rclass_p %>% add_column(col = colall[match(.$y, names(colall))])
rclass_mge_alluvial <- ggplot(mge_solitary_rclass_p, aes(x, id = id, split = y, value = count)) +
geom_parallel_sets(aes(fill = mge), color = "black", lwd = 0.2, axis.width = 0.26) +
geom_parallel_sets_axes(axis.width = 0.22, fill = "grey80") +
geom_parallel_sets_labels(
color = 'black',
size = 12/.pt,
angle = 0
) +
scale_x_discrete(
name = NULL,
expand = c(0, 0.12)
) +
scale_y_continuous(breaks = NULL, expand = c(0.1, 0)) +
scale_fill_manual(
values = colc,
guide = "none"
) +
labs(fill = "") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
plot.margin = margin(14, 1.5, 2, 1.5)
)
rclass_mge_alluvial
rclass_mge_alluvial <- ggplot(mge_solitary_rclass_p, aes(x, id = id, split = y, value = count)) +
# x = categorias, id = identificador unico para cada flujo
# split = y conexión entre las categorías (clases de recombinasas y tipos de MGE).
# value = count: determina el ancho de los flujos según la cantidad de ocurrencias.
# Dibujar los flujos entre categorías, con un grosor proporcional a count.
geom_parallel_sets(aes(fill = mge), color = "black", lwd = 0.2, axis.width = 0.26) +
geom_parallel_sets_axes(axis.width = 0.22, fill = "grey80") + # Dibuja los ejes de las categorías con un ancho de 0.22 y color gris claro ("grey80").
geom_parallel_sets_labels( # Añade etiquetas a los ejes con color negro, tamaño ajustado (12/.pt), y sin rotación (angle = 0).
color = 'black',
size = 12/.pt,
angle = 0
) +
# Configuración de Escalas
scale_x_discrete(
name = NULL,
expand = c(0, 0.12)
) +
# Elimina marcas en el eje y y ajusta la escala para mejor distribución visual.
scale_y_continuous(breaks = NULL, expand = c(0.1, 0)) +
# Asigna colores a los MGE según el vector colc y oculta la leyenda (guide = "none").
scale_fill_manual(
values = colc,
guide = "none"
) +
labs(fill = "") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
plot.margin = margin(14, 1.5, 2, 1.5)
)
rclass_mge_alluvial
rclass_mge_alluvial <- ggplot(mge_solitary_rclass_p, aes(x, id = id, split = y, value = count)) +
# x = categorias, id = identificador unico para cada flujo
# split = y conexión entre las categorías (clases de recombinasas y tipos de MGE).
# value = count: determina el ancho de los flujos según la cantidad de ocurrencias.
# Dibujar los flujos entre categorías, con un grosor proporcional a count.
geom_parallel_sets(aes(fill = mge), color = "black", lwd = 0.2, axis.width = 0.26) +
geom_parallel_sets_axes(axis.width = 0.22, fill = "white", color = "black") + # Dibuja los ejes de las categorías con un ancho de 0.22 y color gris claro ("grey80").
geom_parallel_sets_labels( # Añade etiquetas a los ejes con color negro, tamaño ajustado (12/.pt), y sin rotación (angle = 0).
color = 'black',
size = 12/.pt,
angle = 0
) +
# Configuración de Escalas
scale_x_discrete(
name = NULL,
expand = c(0, 0.12)
) +
# Elimina marcas en el eje y y ajusta la escala para mejor distribución visual.
scale_y_continuous(breaks = NULL, expand = c(0.1, 0)) +
# Asigna colores a los MGE según el vector colc y oculta la leyenda (guide = "none").
scale_fill_manual(
values = colc,
guide = "none"
) +
labs(fill = "") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
plot.margin = margin(14, 1.5, 2, 1.5)
)
rclass_mge_alluvial
rclass_mge_alluvial +
annotate("text", x = 1, y = max(mge_solitary_rclass_p$count) * 1.1,
label = "Recombinase families", size = 5, fontface = "bold") +
annotate("text", x = 2, y = max(mge_solitary_rclass_p$count) * 1.1,
label = "MGEs", size = 5, fontface = "bold")
rclass_mge_alluvial +
annotate("text", x = 1, y = max(mge_solitary_rclass_p$count) * 1.5,
label = "Recombinase families", size = 5, fontface = "bold") +
annotate("text", x = 2, y = max(mge_solitary_rclass_p$count) * 1.5,
label = "MGEs", size = 5, fontface = "bold")
rclass_mge_alluvial +
annotate("text", x = 1, y = 50, label = "Recombinase families", size = 5, fontface = "bold") +
annotate("text", x = 2, y = 50, label = "MGEs", size = 5, fontface = "bold")
rclass_mge_alluvial +
annotate("text", x = 1, y = 200, label = "Recombinase families", size = 5, fontface = "bold") +
annotate("text", x = 2, y = 50, label = "MGEs", size = 5, fontface = "bold")
rclass_mge_alluvial +
annotate("text", x = 1, y = max(mge_solitary_rclass_p$count) * 2, label = "Recombinase families", size = 5, fontface = "bold") +
annotate("text", x = 2, y = 50, label = "MGEs", size = 5, fontface = "bold")
rclass_mge_alluvial +
annotate("text", x = 1, y = max(mge_solitary_rclass_p$count) * 3, label = "Recombinase families", size = 5, fontface = "bold") +
annotate("text", x = 2, y = 50, label = "MGEs", size = 5, fontface = "bold")
rclass_mge_alluvial +
annotate("text", x = 1, y = max(mge_solitary_rclass_p$count) * 1.5, label = "Recombinase families", size = 5, fontface = "bold") +
annotate("text", x = 2, y = 50, label = "MGEs", size = 5, fontface = "bold")
rclass_mge_alluvial +
annotate("text", x = 1, y = max(mge_solitary_rclass_p$count) * 2.5, label = "Recombinase families", size = 5, fontface = "bold") +
annotate("text", x = 2, y = 50, label = "MGEs", size = 5, fontface = "bold")
rclass_mge_alluvial +
annotate("text", x = 1, y = max(mge_solitary_rclass_p$count) * 2.5, label = "Recombinase families", size = 5, fontface = "bold") +
annotate("text", x = 2, y = max(mge_solitary_rclass_p$count) * 2.5, label = "MGEs", size = 5, fontface = "bold")
rclass_mge_alluvial +
annotate("text", x = 1, y = max(mge_solitary_rclass_p$count) * 2.5, label = "recombinase families", size = 5) +
annotate("text", x = 2, y = max(mge_solitary_rclass_p$count) * 2.5, label = "MGEs", size = 5, fontface = "bold")
rclass_mge_alluvial +
annotate("text", x = 1, y = max(mge_solitary_rclass_p$count) * 2.5, label = "recombinase families", size = 5) +
annotate("text", x = 2, y = max(mge_solitary_rclass_p$count) * 2.5, label = "MGEs", size = 5)
rclass_mge_alluvial +
annotate("text", x = 1, y = max(mge_solitary_rclass_p$count) * 2.5, label = "recombinase \nfamilies", size = 5) +
annotate("text", x = 2, y = max(mge_solitary_rclass_p$count) * 2.5, label = "MGEs", size = 5)
# Agregar titulos superiores
rclass_mge_alluvial <- rclass_mge_alluvial +
annotate("text", x = 1, y = max(mge_solitary_rclass_p$count) * 2.5, label = "recombinase \nfamilies", size = 5) +
annotate("text", x = 2, y = max(mge_solitary_rclass_p$count) * 2.5, label = "MGEs", size = 5)
# Figura 2A completa
rclass_mge_alluvial
rclass_mge_alluvial <- ggplot(mge_solitary_rclass_p, aes(x, id = id, split = y, value = count)) +
geom_parallel_sets(aes(fill = mge), color = "black", lwd = 0.2, axis.width = 0.26) +
geom_parallel_sets_axes(axis.width = 0.22, fill = "white", color = colall[match(mge_solitary_rclass_p$y, names(colall))], linewidth = 0.5) +
geom_parallel_sets_labels(
color = 'black',
size = 12/.pt,
angle = 0
) +
scale_x_discrete(
name = NULL,
expand = c(0, 0.12)
) +
scale_y_continuous(breaks = NULL, expand = c(0.1, 0)) +
scale_fill_manual(
values = colc,
guide = "none"
) +
labs(fill = "") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
plot.margin = margin(14, 1.5, 2, 1.5)
)
rclass_mge_alluvial
rclass_mge_alluvial <- ggplot(mge_solitary_rclass_p, aes(x, id = id, split = y, value = count)) +
geom_parallel_sets(aes(fill = mge), color = "black", lwd = 0.2, axis.width = 0.26) +
geom_parallel_sets_axes(axis.width = 0.22, fill = "white",
color = colall[as.factor(mge_solitary_rclass_p$y)], linewidth = 0.5) +
geom_parallel_sets_labels(
color = 'black',
size = 12/.pt,
angle = 0
) +
scale_x_discrete(
name = NULL,
expand = c(0, 0.12)
) +
scale_y_continuous(breaks = NULL, expand = c(0.1, 0)) +
scale_fill_manual(
values = colc,
guide = "none"
) +
labs(fill = "") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
plot.margin = margin(14, 1.5, 2, 1.5)
)
rclass_mge_alluvial
# Crear un vector de colores para cada categoría (familia de recombinasa)
axis_colors <- colall[as.factor(mge_solitary_rclass_p$y)]
rclass_mge_alluvial <- ggplot(mge_solitary_rclass_p, aes(x, id = id, split = y, value = count)) +
geom_parallel_sets(aes(fill = mge), color = "black", lwd = 0.2, axis.width = 0.26) +
geom_parallel_sets_axes(axis.width = 0.22, fill = "white",
color = rep(axis_colors, each = length(unique(mge_solitary_rclass_p$id))),
linewidth = 0.5) +
geom_parallel_sets_labels(
color = 'black',
size = 12/.pt,
angle = 0
) +
scale_x_discrete(
name = NULL,
expand = c(0, 0.12)
) +
scale_y_continuous(breaks = NULL, expand = c(0.1, 0)) +
scale_fill_manual(
values = colc,
guide = "none"
) +
labs(fill = "") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
plot.margin = margin(14, 1.5, 2, 1.5)
)
rclass_mge_alluvial
