library(growthrates) # fit_growthmodel(): Calcular la tasa de crecimiento a partir de datos de microplacas.
library(lmerTest) # Pruebas estadisticas
# Paquetes adicionales (no los mencionan pero son necesarios)
library(readxl) # lectura de archivos de excel
library(tidyverse) # Manipulacion de datos
library(reshape2) # melt(): reduccion de datos
tax <- read_tsv("data/raw_data/species_with_atleast_2genomes.list.gz", col_names=F)
db <-read_tsv("data/processed_data/mge_bins_per_genome_final.txt.gz", col_names = T)
tax <- read_tsv("data/raw_data/species_with_atleast_2genomes.list.gz", col_names=F)
db <-read_tsv("data/processed_data/mge_bins_per_genome_final.txt.gz", col_names = T)
gs <-read_tsv("data/raw_data/genome_size.txt.gz", col_names = T)
class_tree <- read.tree("data/raw_data/progenomes2_class_tree.nwk")
glist <- read_tsv("data/raw_data/genome_status_supplementary_tableS2.txt.gz", col_names = T)
# Obtener los genomas con la mas alta calidad
glist_high <- glist %>%
filter(genome_quality == "high")
# Filtra los genomas de interés y calcula el número de especies y genomas distintos
tax %>%
# Filtra los genomas presentes en la lista de genomas de alta calidad (glist_high$genome)
filter(X2 %in% glist_high$genome) %>%
# Extrae la columna X1 (especies)
pull(X1) %>%
# Calcula el número de especies distintas
n_distinct()
# Esto devuelve: 76,228 genomas y 3207 especies.
# ---------- phylo.heatmap.coords() --------------------
#' Extract X and Y coordinates from phylogenetic heatmap
#'
#' This function computes the x and y coordinates for plotting a phylogenetic heatmap. It also allows the customization of font size, color schemes, and standardization of the data.
#' The coordinates are returned as a list for use in further plotting or data analysis.
#'
#' @param tree A phylogenetic tree of class `phylo` from the `ape` package.
#' @param X A matrix of data (variables x samples) to be visualized in the heatmap.
#' @param fsize A numeric vector of length 3 specifying the font size for different components of the plot.
#' @param colors A character vector of colors to be used in the heatmap. Defaults to `NULL`, in which case the `heat.colors` palette is used.
#' @param standardize A logical indicating whether to standardize the data (default is `FALSE`).
#' @param legend A logical indicating whether to display a legend (default is `TRUE`).
#' @param labels A logical indicating whether to display labels (default is `TRUE`).
#' @param split A numeric vector of length 2 indicating how to split the plot. Defaults to `c(0.5, 0.5)`.
#' @param xlim A numeric vector of length 2 specifying the x-axis limits (default is `NULL`).
#' @param ylim A numeric vector of length 2 specifying the y-axis limits (default is `NULL`).
#' @param mar A numeric vector of length 4 specifying the plot margins (default is `rep(1.1, 4)`).
#' @param grid A logical indicating whether to add a grid to the plot (default is `FALSE`).
#' @param ... Additional parameters passed to the `phylogram` function or other plotting functions.
#'
#' @return A list containing two elements:
#' \item{xx}{A numeric vector of x coordinates for the heatmap.}
#' \item{yy}{A numeric vector of y coordinates for the heatmap.}
#'
#' @examples
#' # Example usage:
#' # Load a phylogenetic tree (example from the ape package)
#' library(ape)
#' data(bird.orders)
#'
#' # Create some random data for the heatmap
#' set.seed(123)
#' X <- matrix(rnorm(100), ncol = 10)
#'
#' # Get the coordinates for the heatmap
#' coords <- phylo.heatmap.coords(tree = bird.orders, X = X, fsize = 1.5)
#'
#' # Plot the heatmap (not shown in this example)
#' plot(coords$xx, coords$yy, type = "n")  # Placeholder plot
#'
#' @export
# Función para obtener las coordenadas x e y del mapa de calor filogenético
phylo.heatmap.coords <- function (tree, X, fsize = 1, colors = NULL, standardize = FALSE, ...)
{
# Verifica que el tamaño de la fuente tenga 3 valores
if (length(fsize) != 3)
fsize <- rep(fsize, 3)
# Si se pasa el parámetro "legend", se extrae
if (hasArg(legend))
legend <- list(...)$legend
else legend <- TRUE # La leyenda por defecto es TRUE
# Si se pasa el parámetro "labels", se extrae
if (hasArg(labels))
labels <- list(...)$labels
else labels <- TRUE
# Si se pasa el parámetro "split", se extrae
if (hasArg(split))
split <- list(...)$split
else split <- c(0.5, 0.5) # Por defecto, el gráfico se divide 50-50
split <- split/sum(split) # Normaliza el valor de la división
# Si la matriz X no tiene nombres de columnas, asigna valores predeterminados
if (is.null(colnames(X)))
colnames(X) <- paste("var", 1:ncol(X), sep = "")
# Si la normalización es requerida, estandariza los datos
if (standardize) {
sd <- apply(X, 2, function(x) sqrt(var(x, na.rm = TRUE))) # Calcula la desviación estándar
X <- (X - matrix(rep(1, Ntip(tree)), Ntip(tree), 1) %*%
colMeans(X, na.rm = TRUE))/(matrix(rep(1, Ntip(tree)),
Ntip(tree), 1) %*% sd)
}
# Si se pasa un límite para el eje X, se utiliza; de lo contrario, se define uno predeterminado
if (hasArg(xlim))
xlim <- list(...)$xlim
else xlim <- c(-0.5, (2 - 0.5) * split[2]/split[1] + 0.5)
# Si se pasa un límite para el eje Y, se utiliza; de lo contrario, se define uno predeterminado
if (hasArg(ylim))
ylim <- list(...)$ylim
else ylim <- if (legend)
c(if (standardize) -0.15 else -0.1, if (labels) 1.1 else 1)
else c(0, if (labels) 1.1 else 1)
# Si se pasa un margen para el gráfico, se utiliza; de lo contrario, se define uno predeterminado
if (hasArg(mar))
mar <- list(...)$mar
else mar <- rep(1.1, 4)
# Si no se define una paleta de colores, se utiliza la paleta predeterminada
if (is.null(colors))
colors <- heat.colors(n = 20)[20:1]
# Si se pasa la opción para añadir una cuadrícula, se extrae
if (hasArg(grid))
add.grid <- list(...)$grid
else add.grid <- FALSE
# Desenreda el árbol filogenético
cw <- untangle(tree, "read.tree")
# Inicializa el gráfico
plot.new()
par(mar = mar)
plot.window(xlim = xlim, ylim = ylim)
# Dibuja el árbol filogenético
h <- phylogram(cw, fsize = fsize[1], ...)
# Calcula las coordenadas de inicio y fin del mapa de calor
START <- h + 1/2 * ((2 - 0.5) * split[2]/split[1] + 0.5 -
h)/(ncol(X) - 1) + 0.5 * strwidth("W") * fsize[1]
END <- (2 - 0.5) * split[2]/split[1] + 0.5 - 1/2 * ((2 - 0.5) * split[2]/split[1] + 0.5 - START)/(ncol(X) - 1)
# Calcula las coordenadas y para las especies/clases
nTips <- length(tree$tip.label)
y <- c(-1/(2 * (nTips - 1)), seq(0, 1, length = nTips) + 2/(2 * (nTips - 1)))
# Calcula las coordenadas x para las variables
x <- seq(START, END, by = (END - START)/(ncol(X) - 1))
# Devuelve las coordenadas
list(xx = x, yy = y)
}
# Establece el entorno de la función
environment(phylo.heatmap.coords) <- environment(phylo.heatmap)
# ---------- phylo.heatmap.legendmod() --------------------
#' Modified Phylogenetic Heatmap with Custom Legend
#'
#' This function generates a phylogenetic heatmap with an optional legend and additional customization options. It allows for standardization of data, color selection, and the addition of a grid to the plot. The function also includes the ability to customize the font size and labels.
#'
#' @param tree A phylogenetic tree of class `phylo` from the `ape` package.
#' @param X A matrix of data (variables x samples) to be visualized in the heatmap.
#' @param fsize A numeric vector of length 3 specifying the font size for different components of the plot.
#' @param colors A character vector of colors to be used in the heatmap. Defaults to `NULL`, in which case the `heat.colors` palette is used.
#' @param standardize A logical indicating whether to standardize the data (default is `FALSE`).
#' @param legend A logical indicating whether to display a legend (default is `TRUE`).
#' @param labels A logical indicating whether to display labels (default is `TRUE`).
#' @param split A numeric vector of length 2 indicating how to split the plot. Defaults to `c(0.5, 0.5)`.
#' @param xlim A numeric vector of length 2 specifying the x-axis limits (default is `NULL`).
#' @param ylim A numeric vector of length 2 specifying the y-axis limits (default is `NULL`).
#' @param mar A numeric vector of length 4 specifying the plot margins (default is `rep(1.1, 4)`).
#' @param grid A logical indicating whether to add a grid to the plot (default is `FALSE`).
#' @param ... Additional parameters passed to the `phylogram` function or other plotting functions.
#'
#' @return A plot with a phylogenetic heatmap, a modified legend, and optional customizations.
#'
#' @examples
#' # Example usage:
#' # Load a phylogenetic tree (example from the ape package)
#' library(ape)
#' data(bird.orders)
#'
#' # Create some random data for the heatmap
#' set.seed(123)
#' X <- matrix(rnorm(100), ncol = 10)
#'
#' # Plot the modified phylogenetic heatmap with custom legend
#' phylo.heatmap.legendmod(tree = bird.orders, X = X, fsize = 1.5)
#'
#' @export
# Función para crear un mapa de calor filogenético con leyenda interactiva
phylo.heatmap.legendmod <- function (tree, X, fsize = 1, colors = NULL, standardize = FALSE, ...)
{
# Verifica que el tamaño de la fuente tenga 3 valores
if (length(fsize) != 3)
fsize <- rep(fsize, 3)
# Si se pasa el parámetro "legend", se extrae
if (hasArg(legend))
legend <- list(...)$legend
else legend <- TRUE
# Si se pasa el parámetro "labels", se extrae
if (hasArg(labels))
labels <- list(...)$labels
else labels <- TRUE
# Si se pasa el parámetro "split", se extrae
if (hasArg(split))
split <- list(...)$split
else split <- c(0.5, 0.5) # Por defecto, el gráfico se divide 50-50
split <- split/sum(split)# Normaliza el valor de la división
# Si la matriz X no tiene nombres de columnas, asigna valores predeterminados
if (is.null(colnames(X)))
colnames(X) <- paste("var", 1:ncol(X), sep = "")
# Si la normalización es requerida, estandariza los datos
if (standardize) {
sd <- apply(X, 2, function(x) sqrt(var(x, na.rm = TRUE))) # Calcula la desviación estándar
X <- (X - matrix(rep(1, Ntip(tree)), Ntip(tree), 1) %*%
colMeans(X, na.rm = TRUE))/(matrix(rep(1, Ntip(tree)), Ntip(tree), 1) %*% sd)
}
# Si se pasa un límite para el eje X, se utiliza; de lo contrario, se define uno predeterminado
if (hasArg(xlim))
xlim <- list(...)$xlim
else xlim <- c(-0.5, (2 - 0.5) * split[2]/split[1] + 0.5)
# Si se pasa un límite para el eje Y, se utiliza; de lo contrario, se define uno predeterminado
if (hasArg(ylim))
ylim <- list(...)$ylim
else ylim <- if (legend)
c(if (standardize) -0.15 else -0.1, if (labels) 1.1 else 1)
else c(0, if (labels) 1.1 else 1)
# Si se pasa un margen para el gráfico, se utiliza; de lo contrario, se define uno predeterminado
if (hasArg(mar))
mar <- list(...)$mar
else mar <- rep(1.1, 4)
# Si no se define una paleta de colores, se utiliza la paleta predeterminada
if (is.null(colors))
colors <- heat.colors(n = 20)[20:1]
# Si se pasa la opción para añadir una cuadrícula, se extrae
if (hasArg(grid))
add.grid <- list(...)$grid
else add.grid <- FALSE
# Desenreda el árbol filogenético
cw <- untangle(tree, "read.tree")
# Inicializa el gráfico
plot.new()
par(mar = mar)
plot.window(xlim = xlim, ylim = ylim)
# Dibuja el árbol filogenético
h <- phylogram(cw, fsize = fsize[1], ...)
# Calcula las coordenadas de inicio y fin del mapa de calor
START <- h + 1/2 * ((2 - 0.5) * split[2]/split[1] + 0.5 - h)/(ncol(X) - 1) + 0.5 * strwidth("W") * fsize[1]
END <- (2 - 0.5) * split[2]/split[1] + 0.5 - 1/2 * ((2 - 0.5) * split[2]/split[1] + 0.5 - START)/(ncol(X) - 1)
# Ajusta los valores de X a las etiquetas del árbol
X <- X[cw$tip.label, ]
# Dibuja el mapa de calor
image(x = seq(START, END, by = (END - START)/(ncol(X) - 1)),
z = t(X[cw$tip.label, ]), add = TRUE, col = colors, right = T, ...)
# Si se desea, añade una cuadrícula
if (add.grid) {
dx <- (END - START)/(ncol(X) - 1)
x <- seq(START - dx/2, END + dx/2, by = dx)
nTips <- length(tree$tip.label)
y <- c(-1/(2 * (nTips - 1)), seq(0, 1, length = nTips) +
1/(2 * (nTips - 1)))
segments(x, y[1], x, y[length(y)])
segments(x[1], y, x[length(x)], y)
}
if (legend)
add.color.bar(leg = END - START, cols = colors, lims = range(X, na.rm = TRUE), title = if (standardize) "standardized value" else "value", subtitle = if (standardize) "SD units" else "", prompt = F, digits = if (max(abs(X),na.rm = TRUE) < 1) round(log10(1/max(abs(X), na.rm = TRUE))) + 1 else 2, fsize = fsize[3], lwd = 20, outline = T, x = START, y = -1/(2 * (Ntip(cw) - 1)) - 3 * fsize[3] * strheight("W"))
if (labels)
text(x = seq(START, END, by = (END - START)/(ncol(X) - 1)), y = rep(1 + 1/(2 * (Ntip(cw) - 1)) + 0.4 * fsize[2] * strwidth("I"), ncol(X)), colnames(X), srt = 70, adj = c(0,0.5), cex = fsize[2])
if (any(is.na(X))) {
ii <- which(is.na(X), arr.ind = TRUE)
x.na <- seq(START, END, by = (END - START)/(ncol(X) - 1))[ii[, 2]]
y.na <- seq(0, 1, by = 1/(nrow(X) - 1))[ii[, 1]]
for (i in 1:length(x.na)) {
xx <- x.na[i] + c(1/2, -1/2) * (END - START)/(ncol(X) - 1)
yy <- y.na[i] + c(-1/2, 1/2) * 1/(nrow(X) - 1)
lines(xx, yy)
}
}
}
# Establece el entorno de la función
environment(phylo.heatmap.legendmod) <- environment(phylo.heatmap)
# Filtrar clases que tienen más de 9 observaciones de MGE
# Se filtra el dataframe 'all_avg_cnt_tax_class' para mantener solo aquellas clases que aparecen más de 9 veces.
allclass_all <- all_avg_cnt_tax_class %>%
filter(mge == all_avg_cnt_tax_class$mge[1]) %>%  # Filtrar por el primer MGE
group_by(class) %>%                               # Agrupar por clase
summarise(cntclass = n()) %>%                     # Contar el número de elementos por clase
filter(., cntclass > 9)                           # Mantener solo clases con más de 9 observaciones
# Obtener los genomas con la mas alta calidad
glist_high <- glist %>%
filter(genome_quality == "high")
# Filtra los genomas de interés y calcula el número de especies y genomas distintos
tax %>%
# Filtra los genomas presentes en la lista de genomas de alta calidad (glist_high$genome)
filter(X2 %in% glist_high$genome) %>%
# Extrae la columna X1 (especies)
pull(X1) %>%
# Calcula el número de especies distintas
n_distinct()
# Esto devuelve: 76,228 genomas y 3207 especies.
# Renombra las columnas del dataframe tax para un nombre más legible
colnames(tax) <- c("specI", "genomeID", "kingdom", "phylum", "class", "genus")
# Reestructura la base de datos 'db' de formato ancho a largo usando reshape2::melt
mdb <- db %>% reshape2::melt()
# Renombra las columnas de la base de datos reestructurada para claridad
mdb <- mdb %>%
dplyr::rename(mge = variable, count = value, genomeID = 'Genome') %>%
# Filtra para incluir solo los genomas de alta calidad (genomas en glist_high$genome)
filter(genomeID %in% glist_high$genome)
##Datos de formato
#crear un data.frame que contenga para cada specI para cada MGE: recuentos genómicos (genomeCnt),
#conteos totales (cnt_tot),
#promedio de recuentos entre genomas (avg_cnt),
#número de genomas en los que estaba presente el MGE (pa),
#la fracción de genomas con el MGE presente (frac) más información taxonómica
# Selecciona las columnas necesarias para trabajar con los datos
mdb_cnt <- mdb %>% select(1, 7, 8)
# Obtiene los valores únicos de MGE
all_mge <- unique(mdb$mge)
# Inicializa un data.frame vacío donde se almacenarán las combinaciones
db_tax <- NULL
# Itera sobre todos los valores únicos de MGE
for(i in 1:length(all_mge)){
# Para cada MGE, se agrega una nueva columna 'mge' con el valor del MGE actual
db_tax_sing <- tax %>% add_column(mge = all_mge[i])
# Une el data.frame actual con el anterior (rbind), creando una tabla con todas las combinaciones
db_tax <- rbind(db_tax, db_tax_sing)
}
# Muestra las primeras filas del data.frame resultante
head(db_tax)
# Muestra las primeras filas del data.frame resultante
head(db_tax)
# Filtra los genomas que están en 'glist_high$genome' y los combina con los recuentos de MGE
db_cnt_all <- db_tax %>%
filter(genomeID %in% glist_high$genome) %>%   # Filtra para obtener solo los genomas que están en 'glist_high$genome'
left_join(., mdb_cnt, by = c("genomeID", "mge"))  # Realiza una unión de izquierda con 'mdb_cnt' usando 'genomeID' y 'mge'
# Reemplaza todos los valores NA en el data.frame por 0
db_cnt_all[is.na(db_cnt_all)] <- 0
# Contar el número de genomas por especie y clase taxonómica
db_cnt_all %>%
select(specI, genomeID, class) %>%        # Selecciona las columnas relevantes: 'specI', 'genomeID', y 'class'
unique() %>%                              # Elimina duplicados, dejando solo combinaciones únicas de especie, genoma y clase
group_by(class) %>%                       # Agrupa los datos por clase taxonómica ('class')
summarise(count = n()) %>%                # Cuenta el número de genomas por cada clase
filter(count > 9)                  # Filtra para solo mostrar las clases que tienen más de 9 genomas
# Filtra los genomas que están en 'glist_high$genome' y los combina con los recuentos de MGE
db_cnt_all <- db_tax %>%
filter(genomeID %in% glist_high$genome) %>%   # Filtra para obtener solo los genomas que están en 'glist_high$genome'
left_join(., mdb_cnt, by = c("genomeID", "mge"))  # Realiza una unión de izquierda con 'mdb_cnt' usando 'genomeID' y 'mge'
# Reemplaza todos los valores NA en el data.frame por 0
db_cnt_all[is.na(db_cnt_all)] <- 0
# Contar el número de genomas por especie y clase taxonómica
db_cnt_all %>%
select(specI, genomeID, class) %>%        # Selecciona las columnas relevantes: 'specI', 'genomeID', y 'class'
unique() %>%                              # Elimina duplicados, dejando solo combinaciones únicas de especie, genoma y clase
group_by(class) %>%                       # Agrupa los datos por clase taxonómica ('class')
summarise(count = n()) %>%                # Cuenta el número de genomas por cada clase
filter(count > 9) %>%                  # Filtra para solo mostrar las clases que tienen más de 9 genomas
head()
library(growthrates) # fit_growthmodel(): Calcular la tasa de crecimiento a partir de datos de microplacas.
library(lmerTest) # Pruebas estadisticas
# Paquetes adicionales (no los mencionan pero son necesarios)
library(readxl) # lectura de archivos de excel
library(tidyverse) # Manipulacion de datos
library(reshape2) # melt(): reduccion de datos
tax <- read_tsv("data/raw_data/species_with_atleast_2genomes.list.gz", col_names=F)
db <-read_tsv("data/processed_data/mge_bins_per_genome_final.txt.gz", col_names = T)
gs <-read_tsv("data/raw_data/genome_size.txt.gz", col_names = T)
class_tree <- read.tree("data/raw_data/progenomes2_class_tree.nwk")
glist <- read_tsv("data/raw_data/genome_status_supplementary_tableS2.txt.gz", col_names = T)
# Obtener los genomas con la mas alta calidad
glist_high <- glist %>%
filter(genome_quality == "high")
# Filtra los genomas de interés y calcula el número de especies y genomas distintos
tax %>%
# Filtra los genomas presentes en la lista de genomas de alta calidad (glist_high$genome)
filter(X2 %in% glist_high$genome) %>%
# Extrae la columna X1 (especies)
pull(X1) %>%
# Calcula el número de especies distintas
n_distinct()
# Esto devuelve: 76,228 genomas y 3207 especies.
# Renombra las columnas del dataframe tax para un nombre más legible
colnames(tax) <- c("specI", "genomeID", "kingdom", "phylum", "class", "genus")
# Reestructura la base de datos 'db' de formato ancho a largo usando reshape2::melt
mdb <- db %>% reshape2::melt()
# Renombra las columnas de la base de datos reestructurada para claridad
mdb <- mdb %>%
dplyr::rename(mge = variable, count = value, genomeID = 'Genome') %>%
# Filtra para incluir solo los genomas de alta calidad (genomas en glist_high$genome)
filter(genomeID %in% glist_high$genome)
# Selecciona las columnas necesarias para trabajar con los datos
mdb_cnt <- mdb %>% select(1, 7, 8)
# Obtiene los valores únicos de MGE
all_mge <- unique(mdb$mge)
# Inicializa un data.frame vacío donde se almacenarán las combinaciones
db_tax <- NULL
# Itera sobre todos los valores únicos de MGE
for(i in 1:length(all_mge)){
# Para cada MGE, se agrega una nueva columna 'mge' con el valor del MGE actual
db_tax_sing <- tax %>% add_column(mge = all_mge[i])
# Une el data.frame actual con el anterior (rbind), creando una tabla con todas las combinaciones
db_tax <- rbind(db_tax, db_tax_sing)
}
# Muestra las primeras filas del data.frame resultante
head(db_tax)
# Filtra los genomas que están en 'glist_high$genome' y los combina con los recuentos de MGE
db_cnt_all <- db_tax %>%
filter(genomeID %in% glist_high$genome) %>%   # Filtra para obtener solo los genomas que están en 'glist_high$genome'
left_join(., mdb_cnt, by = c("genomeID", "mge"))  # Realiza una unión de izquierda con 'mdb_cnt' usando 'genomeID' y 'mge'
# Reemplaza todos los valores NA en el data.frame por 0
db_cnt_all[is.na(db_cnt_all)] <- 0
# Contar el número de genomas por especie y clase taxonómica
db_cnt_all %>%
select(specI, genomeID, class) %>%        # Selecciona las columnas relevantes: 'specI', 'genomeID', y 'class'
unique() %>%                              # Elimina duplicados, dejando solo combinaciones únicas de especie, genoma y clase
group_by(class) %>%                       # Agrupa los datos por clase taxonómica ('class')
summarise(count = n()) %>%                # Cuenta el número de genomas por cada clase
filter(count > 9) %>%                  # Filtra para solo mostrar las clases que tienen más de 9 genomas
head()
# Crear un data.frame de presencia y ausencia
## Agregar información de presencia y ausencia
db_pa_all <- db_cnt_all %>% mutate(presAbs = ifelse(count > 0, 1, 0))
head(db_pa_all)
## Resumir: avg_cnt = promedio de recuento por MGE por especie (specI), frac = fracción de genomas por especie con cada MGE
db_specI <- db_pa_all %>%
group_by(specI, mge) %>%                  # Agrupar los datos por especie (specI) y MGE
summarise(genomeCnt = n(),                # Contar el número de genomas por combinación de 'specI' y 'mge'
avg_cnt = mean(count),          # Calcular el promedio de recuento por MGE por especie
pa = sum(presAbs),              # Calcular la presencia (1) total para cada MGE por especie
cnt_tot = sum(count)) %>%       # Calcular el total de recuentos para cada MGE por especie
mutate(frac = pa / genomeCnt) %>%         # Calcular la fracción de genomas por especie que tienen el MGE
left_join(., tax, by = "specI") %>%       # Unir los datos con la información taxonómica de 'tax' utilizando 'specI'
select(-genomeID) %>%                     # Eliminar la columna 'genomeID' que no es necesaria
unique(.)                                 # Eliminar filas duplicadas
## Resumir: avg_cnt = promedio de recuento por MGE por genoma, frac = fracción de genomas con cada MGE
db_genome <- db_pa_all %>%
group_by(genomeID, mge) %>%                # Agrupar los datos por genoma (genomeID) y MGE
summarise(genomeCnt = n(),                 # Contar el número de combinaciones de genoma y MGE
avg_cnt = mean(count),           # Calcular el promedio de recuento de cada MGE por genoma
pa = sum(presAbs),               # Calcular la presencia total de MGE en cada genoma
cnt_tot = sum(count)) %>%        # Calcular el total de recuentos de MGE por genoma
mutate(frac = pa / genomeCnt) %>%          # Calcular la fracción de genomas con el MGE
left_join(., tax, by = "genomeID") %>%     # Unir los datos con la información taxonómica utilizando 'genomeID'
unique(.)                                  # Eliminar filas duplicadas
# Promedio de recuentos de cada MGE por especie (specI), donde los MGEs son las columnas y las especies (specI) las filas
all_cnt_specI <- db_specI %>%
select(specI, mge, avg_cnt)   # Selecciona las columnas 'specI' (especie), 'mge' (MGE), y 'avg_cnt' (promedio de recuentos)
all_frac_specI <- db_specI %>%
select(specI, mge, frac)      # Selecciona las columnas 'specI' (especie), 'mge' (MGE), y 'frac' (fracción de genomas con el MGE)
all_cnt_genome <- db_genome %>%
select(genomeID, mge, avg_cnt) # Selecciona las columnas 'genomeID' (ID de genoma), 'mge' (MGE), y 'avg_cnt' (promedio de recuentos)
# entrada de datos
all_avg_cnt_tax_class <-  db_specI %>%
select(specI, mge, avg_cnt, class) %>%   # Selecciona las columnas: 'specI', 'mge', 'avg_cnt' y 'class'
filter(., !grepl("Hotspot", mge)) %>%    # Filtra para excluir los MGEs que contienen "Hotspot" en su nombre
filter(., !grepl("Cellular", mge))       # Filtra para excluir los MGEs que contienen "Cellular" en su nombre
allMges <- unique(all_avg_cnt_tax_class$mge)  # Extrae los valores únicos de MGEs
# Filtrar para clases con al menos 10 genomas
allClasses <- all_avg_cnt_tax_class %>%
filter(mge == all_avg_cnt_tax_class$mge[1]) %>%  # Filtra para mantener solo el primer MGE
group_by(class) %>%   # Agrupa los datos por clase
summarise(cntClass = n()) %>%  # Cuenta cuántos genomas existen por clase
filter(cntClass > 9)   # Filtra las clases con más de 9 genomas
# Selección final de datos para el análisis
all_avg_cnt_tax_class_sel_pre <- all_avg_cnt_tax_class %>%
filter(class %in% allClasses$class)   # Filtra las especies para incluir solo aquellas pertenecientes a clases con al menos 10 genomas
# Promedio de tamaño de genoma por especie (SpecI)
gs_int <- gs %>%
group_by(SpecI_id_v3) %>%
summarise(avg_gs = mean(ProteinGeneCounts)) %>%
dplyr::rename(specI = SpecI_id_v3)
# Unir la información de tamaño de genoma con el promedio de recuentos de MGEs por especie y normalizar los recuentos por tamaño de genoma
all_avg_cnt_tax_class_sel <- left_join(all_avg_cnt_tax_class_sel_pre, gs_int, by = "specI") %>%
mutate(norm_count = avg_cnt / avg_gs) %>%  # Normalización: se divide el recuento promedio por el tamaño del genoma
dplyr::rename(count = avg_cnt, avg_cnt = norm_count)  # Renombrar las columnas para mayor claridad
MW_all <- NULL
for(i in 1:length(allMges)){  # Iterar sobre todos los MGEs
mgeX <- allMges[i]  # Seleccionar el MGE actual
mgeDat <- all_avg_cnt_tax_class_sel %>% filter(mge == mgeX)  # Filtrar los datos para el MGE seleccionado
MW <- sapply(seq_along(allClasses$class), function(j){
class_sel <- allClasses$class[j]  # Seleccionar la clase actual
ingroup <- mgeDat %>% filter(class == class_sel)  # Filtrar datos de la clase seleccionada (ingroup)
outgroup <- mgeDat %>% filter(class != class_sel)  # Filtrar datos de las clases no seleccionadas (outgroup)
# Realizar la prueba de Mann-Whitney para comparar los recuentos promedio de MGE entre las clases
MWout <- wilcox.test(ingroup$avg_cnt, outgroup$avg_cnt, alternative = "greater")
out <- c(class_sel, MWout$p.value)  # Guardar el resultado de la prueba (clase y p-value)
return(out)
})
MWOut <- as.data.frame(t(MW[2,]))  # Convertir los resultados de la prueba en un data frame
colnames(MWOut) <- MW[1,]  # Asignar los nombres de las clases como nombres de columna
rownames(MWOut) <- mgeX  # Asignar el nombre del MGE como nombre de fila
MW_all <- rbind(MW_all, MWOut)  # Unir los resultados de la prueba para todos los MGEs
}
# Transponer los resultados finales de la prueba
MW_all_mod <- as.data.frame(t(MW_all))
head(MW_all_mod)
MW_all_adj <- NULL  # Inicializar un objeto vacío para almacenar los resultados ajustados
# Iterar sobre cada columna de los resultados de la prueba de Mann-Whitney
for(k in 1:ncol(MW_all_mod)){
MW_all_mod2 <- as.matrix(MW_all_mod)  # Convertir el data frame en una matriz para facilitar el acceso a las columnas
pVec <- c(MW_all_mod2[,k])  # Extraer la columna k, que contiene los valores p de la prueba de Mann-Whitney
adjP <- p.adjust(pVec, "BH")  # Ajustar los valores p utilizando el método de Benjamini-Hochberg ("BH")
MW_all_adj <- cbind(MW_all_adj, adjP)  # Unir los valores p ajustados a la matriz final
}
# Asignar los nombres de las columnas originales a los resultados ajustados
colnames(MW_all_adj) <- colnames(MW_all_mod)
# Convertir el resultado final en un data frame
MW_all_fin <- as.data.frame(MW_all_adj)
MW_all_stat <- NULL  # Inicializar un objeto vacío para almacenar los resultados binarios
# Iterar sobre cada columna de los resultados ajustados (MW_all_fin)
for(l in 1:ncol(MW_all_fin)){
# Crear una columna "signP" con valor 1 si el valor p es menor a 0.1, y 0 en caso contrario
MW_test <- MW_all_fin %>% mutate(signP=ifelse(MW_all_fin[,l]>0.1,0,1))
MW_all_stat <- cbind(MW_all_stat, MW_test$signP)  # Unir los resultados binarios
}
# Convertir la matriz a un data frame
MW_all_stat <- as.data.frame(MW_all_stat)
# Asignar los nombres de las columnas y filas a la tabla binaria
colnames(MW_all_stat) <- colnames(MW_all_fin)
rownames(MW_all_stat) <- rownames(MW_all_fin)
# Sumar los valores de "signP" por fila para obtener el número total de pruebas significativas por MGE
MW_all_stat_sum <- MW_all_stat %>% mutate(sumSign=rowSums(.))
# Agregar los nombres de las filas a la tabla para obtener un formato adecuado
MW_all_stat2 <- cbind(rownames(MW_all_stat), MW_all_stat)
colnames(MW_all_stat2)[1] <- "class"  # Renombrar la primera columna como "class"
# Crear una versión de los resultados ajustados con nombres de clase y valores p ajustados
MW_all_fin2
