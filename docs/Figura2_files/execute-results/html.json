{
  "hash": "788fcc7c27c8e191bf6bfd409b9fc26e",
  "result": {
    "markdown": "---\ntitle: \"Figura 2\"\n---\n\n\n## Censo de Elementos Genéticos Móviles en Procariotas\n\n![Figura 2. Censo integral de elementos genéticos móviles (MGEs) en procariotas](img/figure2.jpeg){width=\"100%\"}\n\n(A) Contribución de cada una de las cinco principales familias de recombinasas a las seis categorías de MGEs, así como a las recombinasas celulares.\n(B) Número de MGEs por categoría (gráfico de barras) y porcentaje de cada categoría (gráfico de dona) en 76,000 genomas de 3,000 especies, utilizando el flujo de trabajo descrito en la Figura 1.\n(C) Longitudes predichas de MGEs no anidados en pares de bases. Los bigotes representan el rango entre los percentiles 10 y 90.\n\n\n::: {.cell}\n\n:::\n\n\n### PASO 1: Importar datos\n\n1.  **Uso de Archivos Comprimidos:** Cuando trabajen con archivos comprimidos (por ejemplo, con extensión .gz), no es necesario descomprimirlos manualmente antes de cargarlos en R.\n\n2.  **Código Correcto para Cargar Archivos Comprimidos:** Para cargar archivos comprimidos sin descomprimirlos previamente, utilicen el siguiente código:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmge_pg <- read_tsv(\"data/processed_data/mge_bins_per_genome_final.txt.gz\", col_names = T)\nmge_solitary <- read_tsv(\"data/processed_data/solitary_mge_bins_final.txt.gz\", col_names = F)\nrec_class <- read_tsv(\"data/raw_data/recombinase.list.gz\", col_names = F)\nglist <- read_tsv(\"data/raw_data/genome_status_supplementary_tableS2.txt.gz\", col_names = T)\n```\n:::\n\n\n::: {.callout-note icon=\"false\"}\n## Diferencia con el Código Original\n\nEn el código original, el archivo estaba descomprimido. Sin embargo, con la extensión `.gz`, se puede leer directamente el archivo comprimido sin la necesidad de usar herramientas adicionales para descomprimirlo.\n:::\n\n### PASO 2: Manipulación y Limpieza de los datos\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Obtener los genomas con la mas alta calidad\nglist_high <- glist %>% \n  filter(genome_quality == \"high\")\n\n# Renombrar columnas en rec_class\nrec_class <- rec_class %>% \n  # Cambiar X1 por class y X2 por mgeR\n  dplyr::rename(class = X1, mgeR = X2)\n\n# Renombrar columnas en mge_solitary\nmge_solitary <- mge_solitary %>% \n  dplyr::rename(IS_Tn = X1, Phage = X2, Phage_like = X3, CE = X4, Integron = X5, MI = X6,\tHotspot\t= X7, UC = X8,\tCellular = X9, island = X10, island_size = X11, prot_count = X12,\tphage_count = X13, CONJ_T4SS = X14,\tmgeR = X15)\n\n# Transformación y Filtrado de Datos de MGE Solitario\nmge_solitary_melted <- mge_solitary %>% \n  select(1:11,15) %>% # Seleccionar columnas de la 1 a la 11, y la 15\n  # Convierte las columnas 1 a 9 de formato ancho a largo utilizando gather().\n    # - mge: Nombre de la nueva columna que contendrá los nombres originales de las variables.\n    # - mge_pa: Nueva columna que almacenará los valores de las celdas de las columnas originales.\n  gather(mge, mge_pa, 1:9) %>% \n  filter(mge_pa ==1) %>% # filtrar por valores igual a 1 en la columna mge_pa\n  filter(.,!grepl(\"UC\", mge)) %>% # Elimina las filas donde la columna mge contenga la cadena \"UC\", usando grepl() con ! (negación lógica).\n  filter(.,!grepl(\"Hotspot\", mge)) %>% # Elimina las filas donde mge contenga la palabra \"Hotspot\".\n  mutate(mgeRn = str_replace_all(mgeR,\"_\",\"\")) %>% # Crea una nueva columna mgeRn, eliminando todos los guiones bajos (_) en la columna mgeR\n  filter(!str_detect(mgeRn, '[:alnum:] &{1,}')) %>% # Filtra las filas donde mgeRn NO contenga un patrón de caracteres alfanuméricos seguidos de &.\n  select(-mgeRn) %>% # Elimina la columna mgeRn\n  mutate(mgeR = str_replace_all(mgeR,\"&\",\"\")) # Modifica mgeR, eliminando todos los caracteres &.\n\n# Visualizar datos\nhead(mge_solitary_melted)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  island                                       island_size mgeR           mge   mge_pa\n  <chr>                                              <dbl> <chr>          <chr>  <dbl>\n1 562.SAMN04376786.LVNY01000045:952-4426              3474 rve            IS_Tn      1\n2 1313.SAMEA1032643.CNPJ02000077:179268-184242        4974 huh_y1         IS_Tn      1\n3 90371.SAMN06345841.MVIX01000065:110-337              227 huh_y1         IS_Tn      1\n4 766148.SAMN00792444.AFGX01000029:22-9946            9924 rve            IS_Tn      1\n5 95486.SAMN05002005.MUWP01000187:1439-20561         19122 DDE_3          IS_Tn      1\n6 562.SAMN03075146.JRLD01000012:423-1556              1133 Transposase_20 IS_Tn      1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmge_solitary_melted_dw <- mge_solitary_melted %>% \n  select(-mgeR,-mge_pa) %>%  # Elimina las columnas mgeR y mge_pa\n  mutate(island1 = island) %>% # Crea una nueva columna island1, duplicando el valor de la columna island.\n  separate(island1, c(\"g1\",\"g2\",\"g3\")) %>% # Divide la columna island1 en tres nuevas columnas (g1, g2, g3), usando separate(). NOTA: Se asume que island1 contiene valores separados por un delimitador (por defecto, \"_\" o \".\").\n  mutate(genome = paste(g1, g2, sep = \".\")) %>%  # Identificador del genoma. Crea una nueva columna genome, concatenando g1 y g2 con un punto (\".\") entre ellos.\n  select(-g1,-g2,-g3) %>% # Elimina las columnas g1, g2 y g3\n  filter(genome %in% glist_high$genome) %>% # Solo quedarse con genomas de alta calidad\n  select(-genome) # Eliminar columna genoma\n\nhead(mge_solitary_melted_dw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  island                                       island_size mge  \n  <chr>                                              <dbl> <chr>\n1 562.SAMN04376786.LVNY01000045:952-4426              3474 IS_Tn\n2 1313.SAMEA1032643.CNPJ02000077:179268-184242        4974 IS_Tn\n3 90371.SAMN06345841.MVIX01000065:110-337              227 IS_Tn\n4 766148.SAMN00792444.AFGX01000029:22-9946            9924 IS_Tn\n5 95486.SAMN05002005.MUWP01000187:1439-20561         19122 IS_Tn\n6 562.SAMN03075146.JRLD01000012:423-1556              1133 IS_Tn\n```\n:::\n:::\n\n\nAlmacenar variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.table(mge_solitary_melted_dw,file=\"processed_data/mge_bins_final_solitary_collapsed.txt\", sep = \"\\t\", row.names = F, col.names = T, quote = F)\n```\n:::\n\n\n### PASO 3: Clasificación y Conteo de MGE\n\nDistribución de diferentes clases de MGE y cuántas veces aparecen en el conjunto de datos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Unir la informacion a traves de la columna mgeR\nmge_solitary_rclass_all <- left_join(mge_solitary_melted, rec_class, by = \"mgeR\") %>% \n  select(-island_size, -mge_pa, -mgeR) %>% # Elimina las columnas island_size, mge_pa y mgeR\n  separate(island, c(\"g1\",\"g2\",\"g3\")) %>% # Divide la columna island en tres nuevas columnas (g1, g2, g3).\n  mutate(genome = paste(g1, g2, sep = \".\")) %>% # Crea una nueva columna genome, concatenando g1 y g2 con un punto (\".\") entre ellos.\n  select(-g1,-g2,-g3) %>% # Elimina las columnas auxiliares (g1, g2, g3), ya que su información ahora está en genome.\n  group_by(class,mge) %>% # Agrupa los datos por class y mge \n  summarise(count = n()) # Cuenta cuántas veces aparece cada combinación de class y mge\n\nhead(mge_solitary_rclass_all)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n# Groups:   class [3]\n  class mge         count\n  <chr> <chr>       <int>\n1 cas   IS_Tn       12184\n2 dde   CE            181\n3 dde   IS_Tn      913577\n4 dde   Phage       10154\n5 dde   Phage_like    131\n6 huh   CE          18627\n```\n:::\n:::\n\n\nDistribución de diferentes clases de MGE en **genomas de alta calidad.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Unir la informacion a traves de la columna mgeR\nmge_solitary_rclass <- left_join(mge_solitary_melted,rec_class, by = \"mgeR\") %>% \n  select(-island_size, -mge_pa, -mgeR) %>% # Elimina las columnas island_size, mge_pa y mgeR\n  separate(island, c(\"g1\",\"g2\",\"g3\")) %>% # Divide la columna island en tres nuevas columnas (g1, g2, g3).\n  mutate(genome = paste(g1, g2, sep = \".\")) %>% # Crea una nueva columna genome, concatenando g1 y g2 con un punto (\".\") entre ellos.\n  select(-g1,-g2,-g3) %>% # Elimina las columnas auxiliares (g1, g2, g3), ya que su información ahora está en genome.\n  filter(genome %in% glist_high$genome) %>% # Solo quedarse con genomas de alta calidad\n  group_by(class,mge) %>% # Agrupa los datos por class y mge \n  summarise(count = n()) # Cuenta cuántas veces aparece cada combinación de class y mge\n\nhead(mge_solitary_rclass)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n# Groups:   class [3]\n  class mge         count\n  <chr> <chr>       <int>\n1 cas   IS_Tn       12024\n2 dde   CE            180\n3 dde   IS_Tn      904177\n4 dde   Phage       10078\n5 dde   Phage_like    129\n6 huh   CE          18385\n```\n:::\n:::\n\n\n## Figura 2A: Contribución de las principales familias de recombinasas\n\n### PASO 4: Selección de las familias de recombinasas\n\nDefinición de Colores para las Familias de Recombinasa (vector)\n\n::: callout-note\nCrea un vector `colclass` con códigos de color hexadecimales (en este caso, todos son `\"CDCCCC\"`).\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Paleta general de colores\ncolc <- c(\"#D55E00\", \"#E69F00\", \"#F0E442\", \"#56B4E9\", \"#009E73\", \"#0072B2\",\"#CECCCC\")\nnames(colc) <- c(\"IS_Tn\", \"Phage\", \"Phage_like\", \"CE\", \"Integron\", \"MI\", \"Cellular\") \n# Paleta de colores para recombinasas\ncolclass <- c(\"CDCCCC\", \"CDCCCC\", \"CDCCCC\", \"CDCCCC\", \"CDCCCC\")\nnames(colclass) <- c(\"cas\", \"dde\", \"huh\", \"ser\", \"tyr\")\ncolall <- c(colclass, colc)\ncolall\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       cas        dde        huh        ser        tyr      IS_Tn      Phage Phage_like         CE   Integron \n  \"CDCCCC\"   \"CDCCCC\"   \"CDCCCC\"   \"CDCCCC\"   \"CDCCCC\"  \"#D55E00\"  \"#E69F00\"  \"#F0E442\"  \"#56B4E9\"  \"#009E73\" \n        MI   Cellular \n \"#0072B2\"  \"#CECCCC\" \n```\n:::\n:::\n\n\nOrdenamiento de las Categorías\n\n\n::: {.cell}\n\n```{.r .cell-code}\norder_class <- c( \"cas\", \"dde\",\"huh\", \"ser\", \"tyr\")\norder_mge <- c(\"IS_Tn\", \"Phage_like\", \"Phage\", \"CE\", \"MI\", \"Integron\", \"Cellular\")\n```\n:::\n\n\nDefine el orden en el que se mostrarán las clases (`order_class`) y los tipos de MGE (`order_mge`).\n\n-   `order_class` organiza las familias de recombinasas.\n-   `order_mge` organiza los distintos tipos de elementos genéticos móviles.\n\nTransformación de Datos para Visualización\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmge_solitary_rclass$mge <- factor(mge_solitary_rclass$mge, levels = order_mge) # Convierte la variable mge en un factor, asignándole el orden definido en order_mge\nmge_solitary_rclass_p <- gather_set_data(mge_solitary_rclass, 1:2) # Reestructura los datos con gather_set_data(), seleccionando las primeras dos columnas (1:2). NOTA: Se asume que esta función organiza los datos en un formato adecuado para un gráfico tipo \"alluvial\" o \"sankey\".\nmge_solitary_rclass_p$y <- factor(mge_solitary_rclass_p$y, levels = c(order_class, order_mge)) # Convierte la variable y en un factor con el orden de order_class y order_mge, asegurando que los datos se alineen correctamente en la visualización.\nmge_solitary_rclass_p <- mge_solitary_rclass_p %>% add_column(col = colall[match(.$y, names(colall))])\n```\n:::\n\n\n-   Añade una columna `col` con **colores** según la correspondencia entre los valores de `y` y los nombres en `colall`.\n\n    -   `match(.$y, names(colall))` encuentra el color correspondiente a cada categoría en `colall`.\n\n    -   `add_column()` agrega esta información a `mge_solitary_rclass_p`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrclass_mge_alluvial <- ggplot(mge_solitary_rclass_p, aes(x, id = id, split = y, value = count)) +\n  # x = categorias, id = identificador unico para cada flujo\n  # split = y conexión entre las categorías (clases de recombinasas y tipos de MGE).\n  # value = count: determina el ancho de los flujos según la cantidad de ocurrencias.\n  # Dibujar los flujos entre categorías, con un grosor proporcional a count.\n  geom_parallel_sets(aes(fill = mge), color = \"black\", lwd = 0.2, axis.width = 0.26) +\n  geom_parallel_sets_axes(axis.width = 0.22, fill = \"grey80\") + # Dibuja los ejes de las categorías con un ancho de 0.22 y color gris claro (\"grey80\").\n  geom_parallel_sets_labels( # Añade etiquetas a los ejes con color negro, tamaño ajustado (12/.pt), y sin rotación (angle = 0).\n    color = 'black',\n    size = 12/.pt,\n    angle = 0\n  ) +\n  # Configuración de Escalas\n  scale_x_discrete(\n    name = NULL,\n    expand = c(0, 0.12)\n  ) +\n  # Elimina marcas en el eje y y ajusta la escala para mejor distribución visual.\n  scale_y_continuous(breaks = NULL, expand = c(0.1, 0)) +\n  # Asigna colores a los MGE según el vector colc y oculta la leyenda (guide = \"none\").\n  scale_fill_manual(\n  values = colc,\n    guide = \"none\"\n  ) +\n  labs(fill = \"\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_blank(),\n    axis.line = element_blank(),\n    axis.ticks = element_blank(),\n    plot.margin = margin(14, 1.5, 2, 1.5)\n  )\nrclass_mge_alluvial\n```\n\n::: {.cell-output-display}\n![](Figura2_files/figure-html/unnamed-chunk-4-1.png){width=768}\n:::\n:::\n\n\nPero esto no se ve como el articulo, por lo que decidimos cambiar el estilo de los bloques de texto a blanco con bordes negros.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrclass_mge_alluvial <- ggplot(mge_solitary_rclass_p, aes(x, id = id, split = y, value = count)) +\n  # x = categorias, id = identificador unico para cada flujo\n  # split = y conexión entre las categorías (clases de recombinasas y tipos de MGE).\n  # value = count: determina el ancho de los flujos según la cantidad de ocurrencias.\n  # Dibujar los flujos entre categorías, con un grosor proporcional a count.\n  geom_parallel_sets(aes(fill = mge), color = \"black\", lwd = 0.2, axis.width = 0.26) +\n  geom_parallel_sets_axes(axis.width = 0.22, fill = \"white\", color = \"black\") + # Dibuja los ejes de las categorías con un ancho de 0.22 y color blanco y borde negro\n  geom_parallel_sets_labels( # Añade etiquetas a los ejes con color negro, tamaño ajustado (12/.pt), y sin rotación (angle = 0).\n    color = 'black',\n    size = 12/.pt,\n    angle = 0\n  ) +\n  # Configuración de Escalas\n  scale_x_discrete(\n    name = NULL,\n    expand = c(0, 0.12)\n  ) +\n  # Elimina marcas en el eje y y ajusta la escala para mejor distribución visual.\n  scale_y_continuous(breaks = NULL, expand = c(0.1, 0)) +\n  # Asigna colores a los MGE según el vector colc y oculta la leyenda (guide = \"none\").\n  scale_fill_manual(\n  values = colc,\n    guide = \"none\"\n  ) +\n  labs(fill = \"\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_blank(),\n    axis.line = element_blank(),\n    axis.ticks = element_blank(),\n    plot.margin = margin(14, 1.5, 2, 1.5)\n  )\n\n# Agregar titulos superiores\nrclass_mge_alluvial <- rclass_mge_alluvial +\n  annotate(\"text\", x = 1, y = max(mge_solitary_rclass_p$count) * 2.5, label = \"recombinase \\nfamilies\", size = 5) +\nannotate(\"text\", x = 2, y = max(mge_solitary_rclass_p$count) * 2.5, label = \"MGEs\", size = 5)\n\n# Figura 2A completa\nrclass_mge_alluvial\n```\n\n::: {.cell-output-display}\n![](Figura2_files/figure-html/unnamed-chunk-5-1.png){width=768}\n:::\n:::\n\n\n## Figura 2B Distribucion de MGEs por categoría\n\nNúmero de MGEs por categoría (gráfico de barras) y porcentaje de cada categoría (gráfico de dona) en 76,000 genomas de 3,000 especies, utilizando el flujo de trabajo descrito en la Figura 1.\n\n### PASO 5: Calcular el total de MGEs en todos los genomas (sin filtrar por calidad)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmge_pg_melt_all <- mge_pg %>% \n  # Reestructura el data frame en formato largo (long format)\n  reshape2::melt() %>% \n  # Selecciona columnas: columna 1 (genoma), 7 y 8 (variable y valor)\n  select(1,7,8) %>% \n  # Agrupa por tipo de MGE (almacenado en 'variable')\n  group_by(variable) %>% \n  # Suma el total de ocurrencias por cada MGE\n  summarise(total = sum(value)) %>% \n  # Filtra para excluir los elementos anotados como \"Hotspot\"\n  filter(., !grepl(\"Hotspot\", variable))\n\nhead(mge_pg_melt_all)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  variable     total\n  <fct>        <dbl>\n1 IS_Tn      1818135\n2 Phage       110316\n3 Phage_like  247907\n4 CE          101625\n5 Integron      8357\n6 MI          155857\n```\n:::\n:::\n\n\n### PASO 6: Calcular el total de MGEs pero solo para genomas de alta calidad\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmge_pg_melt <- mge_pg %>% \n  # Filtra para conservar solo los genomas presentes en la lista de alta calidad (glist_high)\n  filter(Genome %in% glist_high$genome) %>% \n  # Reestructura el data frame en formato largo\n  reshape2::melt() %>% \n  # Selecciona columnas relevantes: genoma, tipo de MGE, valor\n  select(1,7,8) %>% \n  # Agrupa por tipo de MGE\n  group_by(variable) %>% \n  # Suma el total de ocurrencias de cada MGE\n  summarise(total = sum(value)) %>% \n  # Excluye los elementos anotados como \"Hotspot\"\n  filter(., !grepl(\"Hotspot\", variable))\n\nhead(mge_pg_melt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  variable     total\n  <fct>        <dbl>\n1 IS_Tn      1798076\n2 Phage       109456\n3 Phage_like  245051\n4 CE          100480\n5 Integron      8251\n6 MI          154239\n```\n:::\n:::\n\n\n### PASO 7: Generar un gráfico de barras para visualizar el total de MGEs en genomas de alta calidad\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot_2b <- ggplot(mge_pg_melt, aes(x = reorder(variable, total, sum), y = total, fill = variable)) +\n  # Crea barras con altura según el total\n  geom_bar(stat = 'identity') +\n  # Añade etiquetas con el valor total encima de cada barra\n  geom_text(aes(label = total)) + \n  # Invierte los ejes para una mejor visualización (barras horizontales)\n  coord_flip() +\n  # Aplica una paleta de colores personalizada (definida en 'colc') sin leyenda\n  scale_fill_manual(\"MGE\", values = colc, guide = FALSE) +\n  # Aplica el tema de cowplot para estilo limpio\n  theme_cowplot() + \n  # Añade etiquetas a los ejes\n  labs(x = \"\", y = \"Counts\")\n\n# Muestra el gráfico\nbarplot_2b\n```\n\n::: {.cell-output-display}\n![](Figura2_files/figure-html/unnamed-chunk-8-1.png){width=768}\n:::\n:::\n\n\n### PASO 8: Calcular la proporción relativa de cada MGE (excluyendo los de tipo \"Cellular\") y genera etiquetas para graficar\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmge_pg_relative <- mge_pg_melt %>% \n  # Excluye las variables que contienen la palabra \"Cellular\"\n  filter(., !grepl(\"Cellular\", variable)) %>% \n  # Calcula el porcentaje relativo de cada MGE respecto al total\n  mutate(\n    rel = round((total / sum(total)) * 100, digits = 2),\n    # Crea etiquetas con el nombre del MGE y su porcentaje\n    labs = paste0(variable, \" (\", rel, \"%)\")\n  ) %>%\n  # Ordena por total ascendente para mejor visualización en la gráfica\n  arrange(total)\n\nhead(mge_pg_relative)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  variable     total   rel labs               \n  <fct>        <dbl> <dbl> <chr>              \n1 Integron      8251  0.34 Integron (0.34%)   \n2 CE          100480  4.16 CE (4.16%)         \n3 Phage       109456  4.53 Phage (4.53%)      \n4 MI          154239  6.39 MI (6.39%)         \n5 Phage_like  245051 10.1  Phage_like (10.14%)\n6 IS_Tn      1798076 74.4  IS_Tn (74.44%)     \n```\n:::\n:::\n\n\n### PASO 9: Generar un gráfico de dona (donut chart) para visualizar proporciones relativas de MGEs\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndonutchart_2b <- ggdonutchart(\n  mge_pg_relative,     # Data frame con los porcentajes\n  \"rel\",               # Variable a usar como valor (porcentaje)\n  label = \"labs\",      # Etiquetas que se mostrarán en la gráfica\n  lab.pos = \"in\",      # Posición de etiquetas dentro del gráfico\n  fill = \"variable\",   # Colores de relleno asignados por tipo de MGE\n  color = \"white\",     # Color del borde de cada sección de la dona\n  # Paleta personalizada de colores para los MGEs\n  palette = c(\"#D55E00\", \"#E69F00\", \"#F0E442\", \"#56B4E9\", \"#009E73\", \"#0072B2\", \"#CECCCC\")\n)\n\n# Muestra el gráfico de dona\ndonutchart_2b\n```\n\n::: {.cell-output-display}\n![](Figura2_files/figure-html/unnamed-chunk-10-1.png){width=768}\n:::\n:::\n\n\n### PASO 10: Modificaciones de la Figura 2B\n\nEn esta versión del gráfico de barras, se hicieron **dos ajustes importantes** para mejorar la **legibilidad de los números** que aparecen al lado de cada barra:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot_2b <- ggplot(mge_pg_melt, aes(x = reorder(variable, total, sum), y = total, fill = variable)) +\n  # Crea barras con altura según el total\n  geom_bar(stat = 'identity') +\n  # Añade etiquetas con el valor total encima de cada barra\n  geom_text(aes(label = total), hjust = -0.05) + \n  # Invierte los ejes para una mejor visualización (barras horizontales)\n  coord_flip() +\n  # Aplica una paleta de colores personalizada (definida en 'colc') sin leyenda\n  scale_fill_manual(\"MGE\", values = colc, guide = FALSE) +\n  # Aumentar el espacio extra a la derecha para que no se corten las etiquetas\n  scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +\n  # Aplica el tema de cowplot para estilo limpio\n  theme_cowplot() + \n  # Añade etiquetas a los ejes\n  labs(x = \"\", y = \"Counts\")\n\n# Muestra el gráfico\nbarplot_2b\n```\n\n::: {.cell-output-display}\n![](Figura2_files/figure-html/unnamed-chunk-11-1.png){width=768}\n:::\n:::\n\n\n::: callout-note\n-   El parámetro `hjust = -0.05` **mueve las etiquetas hacia la derecha** del final de cada barra.\n\n-   Sin esta modificación, los números podrían quedar demasiado pegados a la barra, o incluso **encimarse o cortarse**.\n\n-   💡 **`hjust` controla la alineación horizontal**:\n\n    -   `hjust = 1`: texto alineado al final de la barra.\n\n    -   `hjust = 0`: alineado al inicio de la barra.\n\n    -   `hjust < 0`: mueve el texto **más allá del final**, hacia la derecha.\n:::\n\nEn esta versión del gráfico de donut plot, se hicieron **ajusto el texto** para mejorar la **legibilidad de las proporciones** que aparecen al lado del plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calcular proporciones y posiciones\nmge_pg_relative <- mge_pg_melt %>%\n  filter(!grepl(\"Cellular\", variable)) %>%\n  mutate(\n    rel = round((total / sum(total)) * 100, 2),\n    labs = paste0(variable, \" (\", rel, \"%)\")\n  ) %>%\n  arrange(desc(variable)) %>%\n  mutate(\n    ymax = cumsum(rel),\n    ymin = c(0, head(ymax, n = -1)),\n    label_pos = (ymin + ymax) / 2\n  )\n\n# Gráfico de dona con etiquetas visibles y repelentes\ndonutchart_custom <- ggplot(mge_pg_relative, aes(ymax = ymax, ymin = ymin, xmax = 4.5, xmin = 2.8, fill = variable)) +\n  geom_rect(color = \"white\") +\n  coord_polar(theta = \"y\") +\n  xlim(c(2.5, 5)) +  # Aumentamos espacio a la derecha para las etiquetas\n  theme_void() +\n  scale_fill_manual(values = c(\"#D55E00\", \"#E69F00\", \"#F0E442\", \"#56B4E9\", \"#009E73\", \"#0072B2\", \"#CECCCC\")) +\n  geom_text_repel(\n    aes(x = 4.5, y = label_pos, label = labs),\n    size = 4,\n    nudge_x = 0.5,\n    direction = \"y\",\n    segment.size = 0.3,\n    show.legend = FALSE,\n    min.segment.length = 0,\n    box.padding = 0.3\n  ) +\n  theme(legend.position = \"none\")\n\ndonutchart_custom\n```\n\n::: {.cell-output-display}\n![](Figura2_files/figure-html/unnamed-chunk-12-1.png){width=768}\n:::\n:::\n\n\nUnir graficas\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Insertar el donut plot dentro del barplot\nFig2B_combined_plot <- ggdraw() +\n  draw_plot(barplot_2b) +  # Gráfico base\n  draw_plot(donutchart_custom, \n            x = 0.35, y = 0.05,       # Posición dentro del lienzo (ajustable)\n            width = 0.8, height = 0.8)  # Tamaño del donut ployt (ajustable)\n\nFig2B_combined_plot\n```\n\n::: {.cell-output-display}\n![](Figura2_files/figure-html/unnamed-chunk-13-1.png){width=768}\n:::\n:::\n\n\n## Figura 2C Análisis de **longitudes de MGE solitarios**\n\n### PASO 11: **Obtener las longitudes (todos los genomas)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmge_solitary_length_all <- mge_solitary %>% \n  select(1:11) %>%  # Selecciona las primeras 11 columnas\n  gather(mge, mge_pa, 1:9) %>%  # Convierte las columnas 1 a 9 a formato largo\n  filter(mge_pa == 1) %>%  # Filtra solo las filas donde el MGE está presente\n  filter(., !grepl(\"UC\", mge)) %>%  # Elimina filas con \"UC\" en el nombre del MGE\n  filter(., !grepl(\"Hotspot\", mge))  # Elimina filas con \"Hotspot\" en el nombre del MGE\n```\n:::\n\n\n### **PASO 12: Obtener la longitud de MGEs de los genomas de alta calidad**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmge_solitary_length <- mge_solitary %>% \n  select(1:11) %>%  # Selecciona las primeras 11 columnas\n  gather(mge, mge_pa, 1:9) %>%  # Convierte las columnas 1 a 9 a formato largo\n  filter(mge_pa == 1) %>%  # Filtra solo las filas donde el MGE está presente\n  filter(., !grepl(\"UC\", mge)) %>%  # Elimina filas con \"UC\" en el nombre del MGE\n  filter(., !grepl(\"Hotspot\", mge)) %>%  # Elimina filas con \"Hotspot\" en el nombre del MGE\n  separate(island, c(\"g1\", \"g2\", \"g3\")) %>%  # Divide el nombre de la isla en tres partes\n  mutate(genome = paste(g1, g2, sep = \".\")) %>%  # Re-crea el nombre del genoma usando g1 y g2\n  select(-g1, -g2, -g3) %>%  # Elimina las columnas g1, g2 y g3\n  filter(genome %in% glist_high$genome)  # Filtra solo los genomas de alta calidad\n\n# Eliminar filas con NA\nmge_solitary_length_clean <- mge_solitary_length %>% na.omit()\n```\n:::\n\n\n### PASO 13: Graficar de caja de las longitudes de islas por tipo de MGE\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmge_length_boxplot <- ggplot(mge_solitary_length, aes(x = reorder(mge, -island_size, median), y = island_size, fill = mge)) + \n  geom_boxplot(outlier.shape = NA, notch = FALSE, lwd = 1) +  # Crea un gráfico de caja sin mostrar los valores atípicos\n  scale_fill_manual(\"MGE\", values = colc, guide = FALSE) +  # Asigna colores personalizados para cada tipo de MGE\n  scale_y_continuous(limits = quantile(mge_solitary_length$island_size, c(0.1, 0.9))) +  # Limita el eje Y entre el percentil 10 y 90\n  coord_flip() +  # Rota el gráfico para que las categorías estén en el eje Y\n  labs(y = \"Length (bp)\", x = \"\") +  # Añade etiquetas a los ejes\n  theme_cowplot(font_size = 20)  # Aplica un tema limpio y ajusta el tamaño de fuente\n\n# Mostrar el gráfico\nmge_length_boxplot\n```\n\n::: {.cell-output-display}\n![](Figura2_files/figure-html/unnamed-chunk-16-1.png){width=768}\n:::\n:::\n\n\n### PASO 14: Unir la grafica final\n\n\n::: {.cell}\n\n```{.r .cell-code}\n # Figura A en el lado izquierdo\nizquierda_plot <- plot_grid(rclass_mge_alluvial, \n                            labels = 'A', label_size = 12,\n                            ncol = 1)# Establecer una sola columna para B y C\n\n# Figura B y C en el lado derecho\nderecha_plot <- plot_grid(Fig2B_combined_plot, mge_length_boxplot, \n                            labels = c('B', 'C'), label_size = 12,\n                            ncol = 1)# Establecer una sola columna para B y C\n\n# Unir los gráficos\nFigura2_final_plot <- plot_grid(\n  izquierda_plot,                      # Figura A en el lado izquierdo\n  derecha_plot,                    # Figura B y C en el lado derecho\n  ncol = 2,                         # Diseño en dos columnas\n  rel_widths = c(1, 1.5)        # Ajustar las proporciones de los anchos (A es más pequeño)\n)\n\n# Mostrar el gráfico final\nFigura2_final_plot\n```\n\n::: {.cell-output-display}\n![](Figura2_files/figure-html/unnamed-chunk-17-1.png){width=768}\n:::\n:::\n\n\nPuedes encontrar el script completo en [Figura2_modificado.R](https://github.com/ISCB-RSG-MEXICO/Reprohack2025_RLadiesMorelia_RSGMexico/blob/main/scripts/Figura2_modificado.R).\n",
    "supporting": [
      "Figura2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}